{"version":3,"sources":["../src/vnode.js","../src/h.js","../src/util.js","../src/constants.js","../src/dom/index.js","../src/vdom/diff.js","../src/we-element.js","../src/options.js"],"names":["VNode","nodeName","attributes","lastSimple","child","simple","i","children","EMPTY_CHILDREN","arguments","length","stack","push","pop","undefined","String","p","key","options","vnode","cssToDom","css","node","document","createElement","innerText","npn","str","replace","$","$1","toUpperCase","applyRef","ref","value","current","isSameNodeType","hydrating","splitText","_componentConstructor","isNamedNode","ATTR_KEY","toLowerCase","name","normalizedNodeName","className","parentNode","old","setAccessor","useCapture","_listeners","isSvg","e","removeAttribute","style","ns","removeAttributeNS","setAttributeNS","setAttribute","eventProxy","addEventListener","this","type","event","diff","dom","context","mountAll","parent","componentRoot","diffLevel","isSvgMode","ownerSVGElement","ret","appendChild","_component","nodeValue","out","replaceChild","recollectNodeTree","vnodeName","fc","firstChild","props","a","vchildren","innerDiffNode","dangerouslySetInnerHTML","diffAttributes","isHydrating","j","c","vchild","originalChildren","childNodes","keyed","keyedLen","min","childrenLen","vlen","len","prevSvgMode","_child","__key","f","idiff","removeNode","unmountOnly","nextSibling","insertBefore","removeChildren","lastChild","next","previousSibling","attrs","_classCallCheck","instance","Constructor","TypeError","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","querySelector","scopedStyle","$store","isWeb","staticStyleMapping","doc","root","global","Math","Array","window","styleCache","Reflect","customElements","hasOwnProperty","BuiltInHTMLElement","HTMLElement","construct","Promise","resolve","then","bind","setTimeout","IS_NON_DIMENSIONAL","_HTMLElement","_this","data","WeElement","connectedCallback","_this2","install","names","getAttributeNames","getAttribute","disconnectedCallback","uninstall","update","render","host","instances","Omi","afterUpdate"],"mappings":"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","file":"omi.js","sourcesContent":["/** Virtual DOM Node */\r\nexport function VNode() {}\r\n","import { VNode } from './vnode';\r\nimport options from './options';\r\n\r\n\r\nconst stack = [];\r\n\r\nconst EMPTY_CHILDREN = [];\r\n\r\nexport function h(nodeName, attributes) {\r\n\tlet children=EMPTY_CHILDREN, lastSimple, child, simple, i;\r\n\tfor (i=arguments.length; i-- > 2; ) {\r\n\t\tstack.push(arguments[i]);\r\n\t}\r\n\tif (attributes && attributes.children!=null) {\r\n\t\tif (!stack.length) stack.push(attributes.children);\r\n\t\tdelete attributes.children;\r\n\t}\r\n\twhile (stack.length) {\r\n\t\tif ((child = stack.pop()) && child.pop!==undefined) {\r\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif (typeof child==='boolean') child = null;\r\n\r\n\t\t\tif ((simple = typeof nodeName!=='function')) {\r\n\t\t\t\tif (child==null) child = '';\r\n\t\t\t\telse if (typeof child==='number') child = String(child);\r\n\t\t\t\telse if (typeof child!=='string') simple = false;\r\n\t\t\t}\r\n\r\n\t\t\tif (simple && lastSimple) {\r\n\t\t\t\tchildren[children.length-1] += child;\r\n\t\t\t}\r\n\t\t\telse if (children===EMPTY_CHILDREN) {\r\n\t\t\t\tchildren = [child];\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tchildren.push(child);\r\n\t\t\t}\r\n\r\n\t\t\tlastSimple = simple;\r\n\t\t}\r\n\t}\r\n\r\n\tlet p = new VNode();\r\n\tp.nodeName = nodeName;\r\n\tp.children = children;\r\n\tp.attributes = attributes==null ? undefined : attributes;\r\n\tp.key = attributes==null ? undefined : attributes.key;\r\n\r\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\r\n\tif (options.vnode!==undefined) options.vnode(p);\r\n\r\n\treturn p;\r\n}","/**\r\n * @license\r\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\r\n */\r\n\r\n/**\r\n * This shim allows elements written in, or compiled to, ES5 to work on native\r\n * implementations of Custom Elements v1. It sets new.target to the value of\r\n * this.constructor so that the native HTMLElement constructor can access the\r\n * current under-construction element's definition.\r\n */\r\n(function() {\r\n    if (\r\n      // No Reflect, no classes, no need for shim because native custom elements\r\n      // require ES2015 classes or Reflect.\r\n      window.Reflect === undefined ||\r\n      window.customElements === undefined ||\r\n      // The webcomponentsjs custom elements polyfill doesn't require\r\n      // ES2015-compatible construction (`super()` or `Reflect.construct`).\r\n      window.customElements.hasOwnProperty('polyfillWrapFlushCallback')\r\n    ) {\r\n      return;\r\n    }\r\n    const BuiltInHTMLElement = HTMLElement;\r\n    window.HTMLElement = function HTMLElement() {\r\n      return Reflect.construct(BuiltInHTMLElement, [], this.constructor);\r\n    };\r\n    HTMLElement.prototype = BuiltInHTMLElement.prototype;\r\n    HTMLElement.prototype.constructor = HTMLElement;\r\n    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);\r\n  })();\r\n\r\n\r\n\r\nexport function cssToDom(css) {\r\n    const node = document.createElement('style')\r\n    node.innerText = css\r\n    return node\r\n}\r\n\r\n\r\nexport function npn(str) {\r\n    return str.replace(/-(\\w)/g, function ($, $1) {\r\n        return $1.toUpperCase();\r\n    });\r\n}\r\n\r\nexport function extend(obj, props) {\r\n\tfor (let i in props) obj[i] = props[i];\r\n\treturn obj;\r\n}\r\n\r\n/** Invoke or update a ref, depending on whether it is a function or object ref.\r\n *  @param {object|function} [ref=null]\r\n *  @param {any} [value]\r\n */\r\nexport function applyRef(ref, value) {\r\n\tif (ref!=null) {\r\n\t\tif (typeof ref=='function') ref(value);\r\n\t\telse ref.current = value;\r\n\t}\r\n}\r\n\r\n/**\r\n * Call a function asynchronously, as soon as possible. Makes\r\n * use of HTML Promise to schedule the callback if available,\r\n * otherwise falling back to `setTimeout` (mainly for IE<11).\r\n * @type {(callback: function) => void}\r\n */\r\nexport const defer = typeof Promise=='function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout;\r\n\r\n\r\n// export function vdToDom(vd) {\r\n//     if(vd){\r\n//     if (vd.nodeName) {\r\n//         const dom = document.createElement(vd.nodeName)\r\n//         Object.keys(vd.attributes).forEach(key=>{\r\n//             dom.setAttribute(key,vd.attributes[key])\r\n//         })\r\n//         bind(vd, dom)\r\n//         vd.children && vd.children.forEach(child => {\r\n//             const n = vdToDom(child)\r\n//             n&&dom.appendChild(n)\r\n//         })\r\n//         return dom\r\n//     } else {\r\n//         return document.createTextNode(vd)\r\n//     }\r\n// }\r\n// }\r\n\r\n// function bind(vd, dom) {\r\n//     if (vd.attributes.onClick) {\r\n        \r\n//         dom.onclick = vd.attributes.onClick\r\n//     }\r\n// }\r\n","// render modes\r\n\r\nexport const NO_RENDER = 0;\r\nexport const SYNC_RENDER = 1;\r\nexport const FORCE_RENDER = 2;\r\nexport const ASYNC_RENDER = 3;\r\n\r\n\r\nexport const ATTR_KEY = '__preactattr_';\r\n\r\n// DOM properties that should NOT have \"px\" added when numeric\r\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|ows|mnc|ntw|ine[ch]|zoo|^ord/i;\r\n\r\n","import { IS_NON_DIMENSIONAL } from '../constants';\r\nimport { applyRef } from '../util';\r\nimport options from '../options';\r\n\r\n/**\r\n * A DOM event listener\r\n * @typedef {(e: Event) => void} EventListner\r\n */\r\n\r\n/**\r\n * A mapping of event types to event listeners\r\n * @typedef {Object.<string, EventListener>} EventListenerMap\r\n */\r\n\r\n/**\r\n * Properties Preact adds to elements it creates\r\n * @typedef PreactElementExtensions\r\n * @property {string} [normalizedNodeName] A normalized node name to use in diffing\r\n * @property {EventListenerMap} [_listeners] A map of event listeners added by components to this DOM node\r\n * @property {import('../component').Component} [_component] The component that rendered this DOM node\r\n * @property {function} [_componentConstructor] The constructor of the component that rendered this DOM node\r\n */\r\n\r\n/**\r\n * A DOM element that has been extended with Preact properties\r\n * @typedef {Element & ElementCSSInlineStyle & PreactElementExtensions} PreactElement\r\n */\r\n\r\n/**\r\n * Create an element with the given nodeName.\r\n * @param {string} nodeName The DOM node to create\r\n * @param {boolean} [isSvg=false] If `true`, creates an element within the SVG\r\n *  namespace.\r\n * @returns {PreactElement} The created DOM node\r\n */\r\nexport function createNode(nodeName, isSvg) {\r\n\t/** @type {PreactElement} */\r\n\tlet node = isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName);\r\n\tnode.normalizedNodeName = nodeName;\r\n\treturn node;\r\n}\r\n\r\n\r\n/**\r\n * Remove a child node from its parent if attached.\r\n * @param {Node} node The node to remove\r\n */\r\nexport function removeNode(node) {\r\n\tlet parentNode = node.parentNode;\r\n\tif (parentNode) parentNode.removeChild(node);\r\n}\r\n\r\n\r\n/**\r\n * Set a named attribute on the given Node, with special behavior for some names\r\n * and event handlers. If `value` is `null`, the attribute/handler will be\r\n * removed.\r\n * @param {PreactElement} node An element to mutate\r\n * @param {string} name The name/key to set, such as an event or attribute name\r\n * @param {*} old The last value that was set for this name/node pair\r\n * @param {*} value An attribute value, such as a function to be used as an\r\n *  event handler\r\n * @param {boolean} isSvg Are we currently diffing inside an svg?\r\n * @private\r\n */\r\nexport function setAccessor(node, name, old, value, isSvg) {\r\n\tif (name==='className') name = 'class';\r\n\r\n\r\n\tif (name==='key') {\r\n\t\t// ignore\r\n\t}\r\n\telse if (name==='ref') {\r\n\t\tapplyRef(old, null);\r\n\t\tapplyRef(value, node);\r\n\t}\r\n\telse if (name==='class' && !isSvg) {\r\n\t\tnode.className = value || '';\r\n\t}\r\n\telse if (name==='style') {\r\n\t\tif (!value || typeof value==='string' || typeof old==='string') {\r\n\t\t\tnode.style.cssText = value || '';\r\n\t\t}\r\n\t\tif (value && typeof value==='object') {\r\n\t\t\tif (typeof old!=='string') {\r\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\r\n\t\t\t}\r\n\t\t\tfor (let i in value) {\r\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && IS_NON_DIMENSIONAL.test(i)===false ? (value[i]+'px') : value[i];\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\telse if (name==='dangerouslySetInnerHTML') {\r\n\t\tif (value) node.innerHTML = value.__html || '';\r\n\t}\r\n\telse if (name[0]=='o' && name[1]=='n') {\r\n\t\tlet useCapture = name !== (name=name.replace(/Capture$/, ''));\r\n\t\tname = name.toLowerCase().substring(2);\r\n\t\tif (value) {\r\n\t\t\tif (!old) node.addEventListener(name, eventProxy, useCapture);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tnode.removeEventListener(name, eventProxy, useCapture);\r\n\t\t}\r\n\t\t(node._listeners || (node._listeners = {}))[name] = value;\r\n\t}\r\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\r\n\t\t// Attempt to set a DOM property to the given value.\r\n\t\t// IE & FF throw for certain property-value combinations.\r\n\t\ttry {\r\n\t\t\tnode[name] = value==null ? '' : value;\r\n\t\t} catch (e) { }\r\n\t\tif ((value==null || value===false) && name!='spellcheck') node.removeAttribute(name);\r\n\t}\r\n\telse {\r\n\t\tlet ns = isSvg && (name !== (name = name.replace(/^xlink:?/, '')));\r\n\t\t// spellcheck is treated differently than all other boolean values and\r\n\t\t// should not be removed when the value is `false`. See:\r\n\t\t// https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-spellcheck\r\n\t\tif (value==null || value===false) {\r\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase());\r\n\t\t\telse node.removeAttribute(name);\r\n\t\t}\r\n\t\telse if (typeof value!=='function') {\r\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', name.toLowerCase(), value);\r\n\t\t\telse node.setAttribute(name, value);\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n/**\r\n * Proxy an event to hooked event handlers\r\n * @param {Event} e The event object from the browser\r\n * @private\r\n */\r\nfunction eventProxy(e) {\r\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\r\n}","import { ATTR_KEY } from '../constants';\r\nimport { isSameNodeType, isNamedNode } from './index';\r\nimport { createNode, setAccessor } from '../dom/index';\r\nimport options from '../options';\r\nimport { removeNode } from '../dom/index';\r\n\r\n/** Queue of components that have been mounted and are awaiting componentDidMount */\r\nexport const mounts = [];\r\n\r\n/** Diff recursion count, used to track the end of the diff cycle. */\r\nexport let diffLevel = 0;\r\n\r\n/** Global flag indicating if the diff is currently within an SVG */\r\nlet isSvgMode = false;\r\n\r\n/** Global flag indicating if the diff is performing hydration */\r\nlet hydrating = false;\r\n\r\n\r\n\r\n\r\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\r\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\r\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\r\n *\t@returns {Element} dom\t\t\tThe created/mutated element\r\n *\t@private\r\n */\r\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot) {\r\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\r\n\tif (!diffLevel++) {\r\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\r\n\t\tisSvgMode = parent!=null && parent.ownerSVGElement!==undefined;\r\n\r\n\t\t// hydration is indicated by the existing element to be diffed not having a prop cache\r\n\t\thydrating = dom!=null && !(ATTR_KEY in dom);\r\n\t}\r\n\r\n\tlet ret = idiff(dom, vnode, context, mountAll, componentRoot);\r\n\r\n\t// append the element if its a new parent\r\n\tif (parent && ret.parentNode!==parent) parent.appendChild(ret);\r\n\r\n\t// diffLevel being reduced to 0 means we're exiting the diff\r\n\tif (!--diffLevel) {\r\n\t\thydrating = false;\r\n\t\t// invoke queued componentDidMount lifecycle methods\r\n\t\t\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n\r\n\r\n/** Internals of `diff()`, separated to allow bypassing diffLevel / mount flushing. */\r\nfunction idiff(dom, vnode, context, mountAll, componentRoot) {\r\n\tlet out = dom,\r\n\t\tprevSvgMode = isSvgMode;\r\n\r\n\t// empty values (null, undefined, booleans) render as empty Text nodes\r\n\tif (vnode==null || typeof vnode==='boolean') vnode = '';\r\n\r\n\r\n\t// Fast case: Strings & Numbers create/update Text nodes.\r\n\tif (typeof vnode==='string' || typeof vnode==='number') {\r\n\r\n\t\t// update if it's already a Text node:\r\n\t\tif (dom && dom.splitText!==undefined && dom.parentNode && (!dom._component || componentRoot)) {\r\n\t\t\t/* istanbul ignore if */ /* Browser quirk that can't be covered: https://github.com/developit/preact/commit/fd4f21f5c45dfd75151bd27b4c217d8003aa5eb9 */\r\n\t\t\tif (dom.nodeValue!=vnode) {\r\n\t\t\t\tdom.nodeValue = vnode;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\r\n\t\t\tout = document.createTextNode(vnode);\r\n\t\t\tif (dom) {\r\n\t\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\r\n\t\t\t\trecollectNodeTree(dom, true);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tout[ATTR_KEY] = true;\r\n\r\n\t\treturn out;\r\n\t}\r\n\r\n\r\n\t// If the VNode represents a Component, perform a component diff:\r\n\tlet vnodeName = vnode.nodeName;\r\n\t\r\n\r\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\r\n\tisSvgMode = vnodeName==='svg' ? true : vnodeName==='foreignObject' ? false : isSvgMode;\r\n\r\n\r\n\t// If there's no existing element or it's the wrong type, create a new one:\r\n\tvnodeName = String(vnodeName);\r\n\tif (!dom || !isNamedNode(dom, vnodeName)) {\r\n\t\tout = createNode(vnodeName, isSvgMode);\r\n\r\n\t\tif (dom) {\r\n\t\t\t// move children into the replacement node\r\n\t\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\r\n\r\n\t\t\t// if the previous Element was mounted into the DOM, replace it inline\r\n\t\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\r\n\r\n\t\t\t// recycle the old element (skips non-Element node types)\r\n\t\t\trecollectNodeTree(dom, true);\r\n\t\t}\r\n\t}\r\n\r\n\r\n\tlet fc = out.firstChild,\r\n\t\tprops = out[ATTR_KEY],\r\n\t\tvchildren = vnode.children;\r\n\r\n\tif (props==null) {\r\n\t\tprops = out[ATTR_KEY] = {};\r\n\t\tfor (let a=out.attributes, i=a.length; i--; ) props[a[i].name] = a[i].value;\r\n\t}\r\n\r\n\t// Optimization: fast-path for elements containing a single TextNode:\r\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc!=null && fc.splitText!==undefined && fc.nextSibling==null) {\r\n\t\tif (fc.nodeValue!=vchildren[0]) {\r\n\t\t\tfc.nodeValue = vchildren[0];\r\n\t\t}\r\n\t}\r\n\t// otherwise, if there are existing or new children, diff them:\r\n\telse if (vchildren && vchildren.length || fc!=null) {\r\n\t\tinnerDiffNode(out, vchildren, context, mountAll, hydrating || props.dangerouslySetInnerHTML!=null);\r\n\t}\r\n\r\n\r\n\t// Apply attributes/props from VNode to the DOM Element:\r\n\tdiffAttributes(out, vnode.attributes, props);\r\n\r\n\r\n\t// restore previous SVG mode: (in case we're exiting an SVG namespace)\r\n\tisSvgMode = prevSvgMode;\r\n\r\n\treturn out;\r\n}\r\n\r\n\r\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\r\n *\t@param {Element} dom\t\t\tElement whose children should be compared & mutated\r\n *\t@param {Array} vchildren\t\tArray of VNodes to compare to `dom.childNodes`\r\n *\t@param {Object} context\t\t\tImplicitly descendant context object (from most recent `getChildContext()`)\r\n *\t@param {Boolean} mountAll\r\n *\t@param {Boolean} isHydrating\tIf `true`, consumes externally created elements similar to hydration\r\n */\r\nfunction innerDiffNode(dom, vchildren, context, mountAll, isHydrating) {\r\n\tlet originalChildren = dom.childNodes,\r\n\t\tchildren = [],\r\n\t\tkeyed = {},\r\n\t\tkeyedLen = 0,\r\n\t\tmin = 0,\r\n\t\tlen = originalChildren.length,\r\n\t\tchildrenLen = 0,\r\n\t\tvlen = vchildren ? vchildren.length : 0,\r\n\t\tj, c, f, vchild, child;\r\n\r\n\t// Build up a map of keyed children and an Array of unkeyed children:\r\n\tif (len!==0) {\r\n\t\tfor (let i=0; i<len; i++) {\r\n\t\t\tlet child = originalChildren[i],\r\n\t\t\t\tprops = child[ATTR_KEY],\r\n\t\t\t\tkey = vlen && props ? child._component ? child._component.__key : props.key : null;\r\n\t\t\tif (key!=null) {\r\n\t\t\t\tkeyedLen++;\r\n\t\t\t\tkeyed[key] = child;\r\n\t\t\t}\r\n\t\t\telse if (props || (child.splitText!==undefined ? (isHydrating ? child.nodeValue.trim() : true) : isHydrating)) {\r\n\t\t\t\tchildren[childrenLen++] = child;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tif (vlen!==0) {\r\n\t\tfor (let i=0; i<vlen; i++) {\r\n\t\t\tvchild = vchildren[i];\r\n\t\t\tchild = null;\r\n\r\n\t\t\t// attempt to find a node based on key matching\r\n\t\t\tlet key = vchild.key;\r\n\t\t\tif (key!=null) {\r\n\t\t\t\tif (keyedLen && keyed[key]!==undefined) {\r\n\t\t\t\t\tchild = keyed[key];\r\n\t\t\t\t\tkeyed[key] = undefined;\r\n\t\t\t\t\tkeyedLen--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// attempt to pluck a node of the same type from the existing children\r\n\t\t\telse if (!child && min<childrenLen) {\r\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\r\n\t\t\t\t\tif (children[j]!==undefined && isSameNodeType(c = children[j], vchild, isHydrating)) {\r\n\t\t\t\t\t\tchild = c;\r\n\t\t\t\t\t\tchildren[j] = undefined;\r\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\r\n\t\t\t\t\t\tif (j===min) min++;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\r\n\t\t\tchild = idiff(child, vchild, context, mountAll);\r\n\r\n\t\t\tf = originalChildren[i];\r\n\t\t\tif (child && child!==dom && child!==f) {\r\n\t\t\t\tif (f==null) {\r\n\t\t\t\t\tdom.appendChild(child);\r\n\t\t\t\t}\r\n\t\t\t\telse if (child===f.nextSibling) {\r\n\t\t\t\t\tremoveNode(f);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tdom.insertBefore(child, f);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// remove unused keyed children:\r\n\tif (keyedLen) {\r\n\t\tfor (let i in keyed) if (keyed[i]!==undefined) recollectNodeTree(keyed[i], false);\r\n\t}\r\n\r\n\t// remove orphaned unkeyed children:\r\n\twhile (min<=childrenLen) {\r\n\t\tif ((child = children[childrenLen--])!==undefined) recollectNodeTree(child, false);\r\n\t}\r\n}\r\n\r\n\r\n\r\n/** Recursively recycle (or just unmount) a node and its descendants.\r\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\r\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\r\n */\r\nexport function recollectNodeTree(node, unmountOnly) {\r\n\t\r\n\t// If the node's VNode had a ref function, invoke it with null here.\r\n\t// (this is part of the React spec, and smart for unsetting references)\r\n\tif (node[ATTR_KEY]!=null && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);\r\n\r\n\tif (unmountOnly===false || node[ATTR_KEY]==null) {\r\n\t\tremoveNode(node);\r\n\t}\r\n\r\n\tremoveChildren(node);\r\n\r\n}\r\n\r\n\r\n/** Recollect/unmount all children.\r\n *\t- we use .lastChild here because it causes less reflow than .firstChild\r\n *\t- it's also cheaper than accessing the .childNodes Live NodeList\r\n */\r\nexport function removeChildren(node) {\r\n\tnode = node.lastChild;\r\n\twhile (node) {\r\n\t\tlet next = node.previousSibling;\r\n\t\trecollectNodeTree(node, true);\r\n\t\tnode = next;\r\n\t}\r\n}\r\n\r\n\r\n/** Apply differences in attributes from a VNode to the given DOM Element.\r\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\r\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\r\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\r\n */\r\nfunction diffAttributes(dom, attrs, old) {\r\n\tlet name;\r\n\r\n\t// remove attributes no longer present on the vnode by setting them to undefined\r\n\tfor (name in old) {\r\n\t\tif (!(attrs && attrs[name]!=null) && old[name]!=null) {\r\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\r\n\t\t}\r\n\t}\r\n\r\n\t// add new & update changed attributes\r\n\tfor (name in attrs) {\r\n\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\r\n\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\r\n\t\t}\r\n\t}\r\n}\r\n","import { vdToDom, cssToDom, npn } from './util'\nimport { diff } from './vdom/diff';\n\n\nexport default class WeElement extends HTMLElement {\n    constructor() {\n        super()\n        this.props = {}\n        this.data = {}\n    }\n\n    connectedCallback() {\n        this.install()\n        const names = this.getAttributeNames()\n\n        names.forEach(name => {\n            this.props[npn(name)] = this.getAttribute(name)\n        })\n\n        const shadowRoot = this.attachShadow({ mode: 'open' })\n\n        shadowRoot.appendChild(cssToDom(this.css()))\n        this.host =  diff(null, this.render(), {}, false, null, false)\n        shadowRoot.appendChild(this.host)\n\n        this.installed()\n    }\n\n    //chain transfer through this method\n    attributeChangedCallback(name, pre, current) {\n        this.props[npn(name)] = current\n        this.update()\n    }\n\n    disconnectedCallback() {\n        this.uninstall()\n    }\n\n    update() {\n        this.beforeUpdate()\n        diff(this.host, this.render())\n        this.afterUpdate()\n    }\n\n    install() {\n\n    }\n\n    installed() {\n\n    }\n\n    beforeUpdate() {\n\n    }\n\n    afterUpdate() {\n\n    }\n}\n","function getGlobal() {\r\n\tif (typeof global !== 'object' || !global || global.Math !== Math || global.Array !== Array) {\r\n\t\tif (typeof self !== 'undefined') {\r\n\t\t\treturn self;\r\n\t\t} else if (typeof window !== 'undefined') {\r\n\t\t\treturn window;\r\n\t\t} else if (typeof global !== 'undefined') {\r\n\t\t\treturn global;\r\n\t\t}\r\n\t\treturn (function(){\r\n\t\t\treturn this;\r\n\t\t})();\r\n\t\t\r\n\t}\r\n\treturn global;\r\n}\r\n\r\n/** Global options\r\n *\t@public\r\n *\t@namespace options {Object}\r\n */\r\nexport default {\r\n\r\n\tscopedStyle: true,\r\n\t$store: null,\r\n\tisWeb: true,\r\n\tstaticStyleMapping: {},\r\n\tdoc: typeof document === 'object' ? document : null,\r\n\troot: getGlobal(),\r\n\t//styleCache :[{ctor:ctor,ctorName:ctorName,style:style}]\r\n\tstyleCache: []\r\n\t//componentChange(component, element) { },\r\n\t/** If `true`, `prop` changes trigger synchronous component updates.\r\n\t *\t@name syncComponentUpdates\r\n\t *\t@type Boolean\r\n\t *\t@default true\r\n\t */\r\n\t//syncComponentUpdates: true,\r\n\r\n\t/** Processes all created VNodes.\r\n\t *\t@param {VNode} vnode\tA newly-created VNode to normalize/process\r\n\t */\r\n\t//vnode(vnode) { }\r\n\r\n\t/** Hook invoked after a component is mounted. */\r\n\t//afterMount(component) { },\r\n\r\n\t/** Hook invoked after the DOM is updated with a component's latest render. */\r\n\t//afterUpdate(component) { }\r\n\r\n\t/** Hook invoked immediately before a component is unmounted. */\r\n\t// beforeUnmount(component) { }\r\n};\r\n"]}